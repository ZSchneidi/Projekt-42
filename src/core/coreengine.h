#ifndef COREENGINE_H
#define COREENGINE_H

#include <QMainWindow>
#include <QCoreApplication>
#include <QTime>
#include <QTimer>

#include "global_define.h"
#include "ext/base.h"
#include "core/eventhandler.h"
#include "core/configparser.h"
#include "core/loghandler.h"
#include "core/uiobjecthandler.h"
#include "core/exception.h"
#include "view/viewport.h"
#include "elements/product.h"
#include "elements/event.h"

class Base;
class ViewPort;
class EventHandler;
class ConfigParser;
class LogHandler;
class UIObjectHandler;

namespace Ui {
    class CoreEngine;
}


/**
  * The CoreEngine is the main class which handles all other classes and the entire
  * application process. The core initializes the hole environment delegates tasks to
  * all its aggregated objects.
  *
  * The main function of this application is to provide a ViewPort which is able to display
  * qml based layouts with their corresponding logic.
  * Once the viewport is displayed the application logic and layer is defined in qml files
  * which are stored in the view subdirectory.
  */
class CoreEngine : public QMainWindow
{
    Q_OBJECT

public:
    /*declaration of the initial startup modes*/
    enum InitMode {
	/*In this mode the Layout is declared in qml files which has
	 *to be loaded and provided to the main ViewPort.
	 */
	QML_UI,
	/*In this mode the application will search for a configuration
	 *that was generated by the existing backend.
	 *The cfg files provide information about the machine and its layout.
	 */
	WEB_UI
	};

    explicit CoreEngine(QWidget *parent = 0,InitMode mode = QML_UI, Base::Log_state log_state = Base::LS_Active , QString config_path = "");
    ~CoreEngine();

    bool SystemStartUp(const QSize size, const Qt::WindowState window_state);
    bool logSystemMsg(const QString message);
    bool logWarning(const QString message);
    bool logError(const QString message);
    bool logInfo(const QString message);
    bool configLogInfo(const QString message);
    bool configLogWarning(const QString message);
    bool configLogError(const QString message);
    void startSystemTimer();

	bool showHelpDialog();

    //GETTER
    inline CoreEngine *getCore() {return this;}
    inline ViewPort *getViewPort() {return this->declarative_viewport;}
    inline LogHandler *getLogHandler() {return this->log_handler;}
    UIObjectHandler *getUIObjectHandler();
    inline EventHandler* getEventHandler() { return this->event_handler; }
    inline InitMode getInitMode() { return this->init_mode; }

	inline QString getCoreAppDirPath() { return QCoreApplication::applicationDirPath(); }

	//SETTER

    QTime *system_time;
    QTimer *system_timer;
    QDate *system_date;

protected:

    void closeEvent(QCloseEvent *);

private slots:

    void updateSystemDateTime();

private:


    bool setUpViewport(const QSize size, const Qt::WindowState window_state);
    bool initViewEnvironment();
    void initSystemConnections();
    void registerQmlTypes();



    ViewPort *declarative_viewport;
    ConfigParser *config_parser;
    LogHandler *log_handler;
    UIObjectHandler *ui_object_handler;

    Ui::CoreEngine *ui;

    EventHandler *event_handler;
    InitMode init_mode;
    QString config_path;


};

#endif // COREENGINE_H
