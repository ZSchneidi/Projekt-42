#ifndef COREENGINE_H
#define COREENGINE_H

#include <QMainWindow>
#include "global_define.h"
#include "core/eventhandler.h"
#include "core/configparser.h"
#include "core/loghandler.h"
#include "core/uiobjecthandler.h"
#include "view/viewport.h"

class ViewPort;
class EventHandler;
class ConfigParser;
class LogHandler;
class UIObjectHandler;

namespace Ui {
    class CoreEngine;
}

class CoreEngine : public QMainWindow
{
    Q_OBJECT

public:
    /*declaration of the initial startup modes*/
    enum InitMode {
	/*In this mode the Layout is declared in qml files which has
	 *to be loaded and provided to the main ViewPort.
	 */
	QML_UI,
	/*In this mode the application will search for a configuration
	 *that was generated by the existing backend.
	 *The cfg files provide information about the machine and its layout.
	 */
	WEB_UI
	};

    explicit CoreEngine(QWidget *parent = 0,InitMode mode = QML_UI,QUrl path = QUrl(""));
    ~CoreEngine();

    inline EventHandler* getEventHandler() { return this->event_handler; }
    bool SystemStartUp();
    bool logSystemMsg(const QString message);
    bool logWarning(const QString message);
    bool logError(const QString message);
    bool logInfo(const QString message);

    inline CoreEngine *getCore() {return this;}
    inline LogHandler *getLogHandler() {return this->log_handler;}
    inline UIObjectHandler *getUIObjectHandler() {return this->ui_object_handler;}

protected:

    void closeEvent(QCloseEvent *);

private:

    int stuff;

    ViewPort *declarative_viewport;
    ConfigParser *config_parser;
    LogHandler *log_handler;
    UIObjectHandler *ui_object_handler;

    Ui::CoreEngine *ui;

    EventHandler *event_handler;

    bool setUpViewport();
    bool initStartup();

    InitMode init_mode;
    QUrl ui_layer_path;

};

#endif // COREENGINE_H
